// We use this to do clear floats
@mixin clearfix {
    &:before,
    &:after {
        content: " ";
        display: table;
    }
    &:after {
        clear: both;
    }
}

@mixin box-shadow($top, $left, $blur, $color, $inset: false) {
    @if $inset {
        -webkit-box-shadow:inset $top $left $blur $color;
        -moz-box-shadow:inset $top $left $blur $color;
        box-shadow:inset $top $left $blur $color;
    } @else {
        -webkit-box-shadow: $top $left $blur $color;
        -moz-box-shadow: $top $left $blur $color;
        box-shadow: $top $left $blur $color;
    }
}

// Border radius shorthand
@mixin border-radius($radius) {
    border-radius: $radius;
    -webkit-border-radius: $radius;
    -moz-border-radius: $radius;
    -ms-border-radius: $radius;
    -o-border-radius: $radius;
}

// transition shorthand
@mixin transition($args...) {
    -webkit-transition: $args;
    -moz-transition: $args;
    -ms-transition: $args;
    -o-transition: $args;
    transition: $args;
}

@mixin transform-origin($val) {
    -webkit-transform-origin: $val;
    -moz-transform-origin: $val;
    -ms-transform-origin: $val;
    transform-origin: $val;
}

@mixin transform-style($val) {
    -webkit-transform-style: $val;
    -moz-transform-style: $val;
    -ms-transform-style: $val;
    transform-style: $val;
}

@mixin perspective($val) {
    -webkit-perspective: $val;
    -moz-perspective: $val;
    -ms-perspective: $val;
    perspective: $val;
}

@mixin perspective-origin($val){
    -webkit-perspective-origin: $val;
    -moz-perspective-origin: $val;
    -ms-perspective-origin: $val;
    perspective-origin: $val;
}

@mixin backface-visibility ($arguments) {
    -webkit-backface-visibility: $arguments;
    -moz-backface-visibility: $arguments;
    -ms-backface-visibility: $arguments;
    -o-backface-visibility: $arguments;
    backface-visibility: $arguments;
}

//For placeholder styling
@mixin placeholder {
    &::-webkit-input-placeholder {
        @content
    }
    &::-moz-placeholder {
        @content
    }
    &:-ms-input-placeholder {
        @content
    }
}

//Translate 2d mixin
@mixin translate2d($horizontal: 0, $vertical: 0) {
    -webkit-transform: translate($horizontal, $vertical);
    -ms-transform: translate($horizontal, $vertical);
    transform: translate($horizontal, $vertical);
}

//Transform rotate mixin
@mixin transform($value) {
    -webkit-transform: $value;
    -moz-transform: $value;
    -ms-transform: $value;
    -o-transform: $value;
    transform: $value;
}

// We use this to create flex box container
@mixin flex-display($display: flex) {
    display: -webkit-#{$display};
    display: -moz-#{$display};
    display: -ms-#{$display}box; // IE10 uses -ms-flexbox
    display: -ms-#{$display}; // IE11
    display: $display;
}

// We use this to create isosceles triangles
// $triangle-size - Used to set border-size. No default, set a px or em size.
// $triangle-color - Used to set border-color which makes up triangle. No default
// $triangle-direction - Used to determine which direction triangle points. Options: top, bottom, left, right
@mixin css-triangle($triangle-size, $triangle-color, $triangle-direction) {
    border: inset $triangle-size;
    content: "";
    display: block;
    height: 0;
    width: 0;
    @if ($triangle-direction == top) {
        border-color: $triangle-color transparent transparent transparent;
        border-top-style: solid;
    }
    @if ($triangle-direction == bottom) {
        border-color: transparent transparent $triangle-color transparent;
        border-bottom-style: solid;
    }
    @if ($triangle-direction == left) {
        border-color: transparent transparent transparent $triangle-color;
        border-left-style: solid;
    }
    @if ($triangle-direction == right) {
        border-color: transparent $triangle-color transparent transparent;
        border-right-style: solid;
    }
}

// @mixins
//
// We use this to add transitions to elements
// $property - Default: all, Options: http://www.w3.org/TR/css3-transitions/#animatable-properties
// $speed - Default: 300ms
// $ease - Default:ease-out, Options: http://css-tricks.com/almanac/properties/t/transition-timing-function/
@mixin single-transition($property:all, $speed:300ms, $ease:ease-out) {
    -webkit-transition: $property $speed $ease;
    transition: $property $speed $ease;
}

//many transitions
//@include manyTransitions(( top ), .55s, ease);
@mixin manyTransitions( $list, $time: .3s, $easing:ease-out ) {
    $transitions: ();
    @each $transition in $list {
        $trans: unquote( "#{$transition} #{$time} #{$easing}" );
        $transitions: append( $transitions, $trans, comma );
    }
    -webkit-transition: #{$transitions};
    transition:        #{$transitions};
}

//Foundation GRID
// IMPORT ONCE
// We use this to prevent styles from being loaded multiple times for components that rely on other components.
$modules: () !default;
@mixin exports($name) {
    // Import from global scope
    $modules: $modules !global;
    // Check if a module is already on the list
    $module_index: index($modules, $name);
    @if (($module_index == null) or ($module_index == false)) {
        $modules: append($modules, $name) !global;
        @content;
    }
}

// @mixins
//
// We use this to add user-select for element
// $value - Default: none,
@mixin user-select($value: none) {
    -webkit-user-select: $value;
    -ms-user-select: $value;
    user-select: $value;
}

// @mixins
//
// We use this to add gradients for element
@mixin linear-gradient($fromColor, $toColor) {
    background-color: $toColor;
    background-image: -webkit-gradient(linear, left top, left bottom, from($fromColor), to($toColor));
    background-image: -webkit-linear-gradient(top, $fromColor, $toColor);
    background-image:    -moz-linear-gradient(top, $fromColor, $toColor);
    background-image:      -o-linear-gradient(top, $fromColor, $toColor);
    background-image:         linear-gradient(top, $fromColor, $toColor);
}



@mixin for-phone-only {
    @media (max-width: 599px) { @content; }
}
@mixin for-tablet-portrait-up {
    @media (min-width: 600px) { @content; }
}
@mixin for-tablet-landscape-up {
    @media (min-width: 900px) { @content; }
}
@mixin for-desktop-up {
    @media (min-width: 1200px) { @content; }
}
@mixin for-big-desktop-up {
    @media (min-width: 1800px) { @content; }
}

